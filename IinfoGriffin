/* 
 * File:   main.c
 * Author: griffin o rei do mundo
 *
 * Created on May 15, 2014, 3:07 PM
 */

#include <stdio.h>
#include <stdlib.h>



#include <string.h>
#define X 1000
typedef union dado{
    
char *nome;
int casos;
}Dado;

typedef struct Localidade  {
 Dado d;
struct Localidade *next;
}Local;

 typedef struct Localidades{
    struct Localidade *distrito;
    struct Localidades *next;

}Locali;
struct Localidades *Lista;

void list(){
     /*
    while(Lista != NULL){
    
        while(Lista->distrito != NULL ){
          if(Lista->distrito->next == NULL) printf(" Casos :%d\n",Lista->distrito->d.casos);
            else  printf(" %s",Lista->distrito->d.nome);
            Lista->distrito = Lista->distrito->next;
            
        }
        Lista = Lista->next;
    }
*/
    printf("%s",Lista->distrito->d.nome);
}
void addS(char s[]){
    
    char *distrito,*concelho,*freguesia;
    char buffer[1000];
    memset(&buffer, 0, X);
    int i = 0,j= 0, c = 0;
    while(s[i]!= '\n'){
        if(s[i]== ':'){
            c++;
            if(c ==1){ 
            distrito = malloc(sizeof(buffer));
            strcpy(distrito,buffer);}
            if(c ==2){
            concelho = malloc(sizeof(buffer));
            strcpy(concelho,buffer);}
            if(c ==3){
            freguesia = malloc(sizeof(buffer));
            strcpy(freguesia,buffer);}
        
             memset(&buffer, 0, X);
             j= 0;  
             i++;
        }
     else{
     buffer[j] = s[i];
     i++;
     j++;
        }
    
    }
    
    
    Local *d ;
    d = (Local*)malloc(sizeof(Local));
    d->d.nome = malloc(sizeof(distrito));
    strcpy(d->d.nome,distrito);
  
    
        
    Local *cc  = (Local*)malloc(sizeof(Local));
    cc->d.nome = malloc(sizeof(concelho));
    strcpy( cc->d.nome,concelho);
   
    d->next = cc;
    
    if(c==3){
    
    Local *f  =(Local*) malloc(sizeof(Local));
    f->d.nome = malloc(sizeof(freguesia));
    
    strcpy(f->d.nome,freguesia);
      cc->next = f;  
      
       Local *a =(Local*) malloc(sizeof(Local));
       a->d.casos = atoi(buffer);
       a->next = NULL;
       f->next = a;
    }
    else { Local *a =(Local*) malloc(sizeof(Local));
       cc->d.casos = atoi(buffer);
       a->next = NULL;
       cc->next = a;
    
    }
    
   Locali *aux = malloc(sizeof(Locali));
    aux->distrito = d;
    aux->next = Lista;
    Lista = aux;
    
    


}

int main(int argc, char** argv) {
    char buffer[X];
    Lista = NULL;
    FILE *f = fopen("info.txt","r");
    if(f!= NULL){ 
        while(fgets(buffer,X,f)){
            addS(buffer);
        
        
        }
    
    
    }
    fclose(f);
   list();
 return (EXIT_SUCCESS);

}


   


